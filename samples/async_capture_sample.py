#!/usr/bin/env python3
"""
–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø—Ä–∏–º–µ—Ä –∑–∞—Ö–≤–∞—Ç–∞ –≤–∏–¥–µ–æ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã.
–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ AsyncController –∏ –Ω–æ–≤—ã—Ö —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö.
"""

import asyncio
import argparse
import json
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(str(Path(__file__).parent.parent))

from controller.async_controller import AsyncController
from core.async_components.data_types import Frame
import numpy as np
from datetime import datetime


async def create_sample_frame(frame_id: int, source_id: int = 1) -> Frame:
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–∞–¥—Ä–∞"""
    # –°–æ–∑–¥–∞–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    image_data = np.random.randint(0, 255, (480, 640, 3), dtype=np.uint8)
    
    return Frame(
        id=frame_id,
        source_id=source_id,
        timestamp=datetime.now(),
        data=image_data,
        metadata={'test': True}
    )


async def async_capture_demo():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –∑–∞—Ö–≤–∞—Ç–∞"""
    print("=== –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞—Ö–≤–∞—Ç –≤–∏–¥–µ–æ ===")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞
    controller = AsyncController()
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        await controller.initialize()
        
        # –ó–∞–ø—É—Å–∫ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞
        await controller.start()
        
        print("–ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö –∫–∞–¥—Ä–æ–≤
        for i in range(5):
            frame = await create_sample_frame(i)
            result = await controller.process_frame(frame)
            
            if result:
                print(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω –∫–∞–¥—Ä {i}: –Ω–∞–π–¥–µ–Ω–æ {len(result.tracks)} —Ç—Ä–µ–∫–æ–≤")
            else:
                print(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω –∫–∞–¥—Ä {i}: —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—É—Å—Ç–æ–π")
            
            # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∫–∞–¥—Ä–∞–º–∏
            await asyncio.sleep(0.1)
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫
        metrics = controller.get_metrics()
        print(f"–ú–µ—Ç—Ä–∏–∫–∏ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞: {metrics['controller']}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã
        health = await controller.get_health_status()
        print(f"–°—Ç–∞—Ç—É—Å –∑–¥–æ—Ä–æ–≤—å—è: {health['overall_health']}")
        
    finally:
        # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞
        await controller.stop()
        print("–ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


async def async_batch_processing_demo():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –±–∞—Ç—á–µ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
    print("\n=== –ë–∞—Ç—á–µ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ ===")
    
    controller = AsyncController()
    
    try:
        await controller.initialize()
        await controller.start()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –±–∞—Ç—á–∞ –∫–∞–¥—Ä–æ–≤
        frames = []
        for i in range(10):
            frame = await create_sample_frame(i)
            frames.append(frame)
        
        # –ë–∞—Ç—á–µ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
        results = await controller.process_batch(frames)
        print(f"–ë–∞—Ç—á–µ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞: {len(frames)} –∫–∞–¥—Ä–æ–≤ -> {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        
        # –î–µ—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ pipeline
        if controller.pipeline:
            pipeline_metrics = controller.pipeline.get_detailed_metrics()
            print(f"–ú–µ—Ç—Ä–∏–∫–∏ pipeline: {pipeline_metrics}")
        
    finally:
        await controller.stop()


async def async_config_demo():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π"""
    print("\n=== –†–∞–±–æ—Ç–∞ —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π ===")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Å—Ç–æ–º–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    custom_config = {
        'system': {
            'fps': 30,
            'max_memory_usage_mb': 8192,
            'debug_mode': True,
            'log_level': 'INFO'
        },
        'processors': {
            'video_capture': {
                'type': 'VideoCapture',
                'enabled': True,
                'max_queue_size': 10,
                'timeout': 0.1,
                'params': {
                    'fps': 30,
                    'resolution': [1280, 720]
                }
            }
        },
        'pipelines': {
            'surveillance': {
                'enabled': True,
                'max_concurrent_tasks': 4,
                'buffer_size': 100
            }
        }
    }
    
    controller = AsyncController()
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å –∫–∞—Å—Ç–æ–º–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
        await controller.initialize(custom_config)
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        config_summary = controller.get_config_summary()
        print(f"–°–≤–æ–¥–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {config_summary}")
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤ —Ñ–∞–π–ª
        config_path = "async_config_demo.json"
        await controller.save_config(config_path)
        print(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ {config_path}")
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ —Ñ–∞–π–ª–∞
        new_controller = AsyncController()
        await new_controller.load_config(config_path)
        print("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ —Ñ–∞–π–ª–∞")
        
        # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        import os
        os.remove(config_path)
        
    finally:
        await controller.stop()


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    parser = argparse.ArgumentParser(description='–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø—Ä–∏–º–µ—Ä –∑–∞—Ö–≤–∞—Ç–∞ –≤–∏–¥–µ–æ')
    parser.add_argument('--demo', choices=['capture', 'batch', 'config', 'all'], 
                       default='all', help='–¢–∏–ø –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏')
    
    args = parser.parse_args()
    
    print("üöÄ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø—Ä–∏–º–µ—Ä –∑–∞—Ö–≤–∞—Ç–∞ –≤–∏–¥–µ–æ EvilEye")
    print("=" * 50)
    
    try:
        if args.demo == 'capture' or args.demo == 'all':
            await async_capture_demo()
        
        if args.demo == 'batch' or args.demo == 'all':
            await async_batch_processing_demo()
        
        if args.demo == 'config' or args.demo == 'all':
            await async_config_demo()
        
        print("\n‚úÖ –í—Å–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
        raise


if __name__ == "__main__":
    asyncio.run(main())
