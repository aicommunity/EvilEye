#!/usr/bin/env python3
"""
Python script to fix EvilEye entry points automatically
"""

import os
import sys
from pathlib import Path


def find_project_root():
    """
    –ù–∞–π—Ç–∏ –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞ EvilEye.
    –ò—â–µ—Ç –ø–∞–ø–∫—É, —Å–æ–¥–µ—Ä–∂–∞—â—É—é pyproject.toml —Å –∏–º–µ–Ω–µ–º –ø—Ä–æ–µ–∫—Ç–∞ 'evileye'.
    """
    current_path = Path(__file__).resolve()
    
    # –ü–æ–¥–Ω–∏–º–∞–µ–º—Å—è –ø–æ –∏–µ—Ä–∞—Ä—Ö–∏–∏ –ø–∞–ø–æ–∫, –∏—â–∞ pyproject.toml
    for parent in current_path.parents:
        pyproject_path = parent / "pyproject.toml"
        if pyproject_path.exists():
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–µ–∫—Ç EvilEye
                content = pyproject_path.read_text()
                if "name = \"evileye\"" in content or "name = 'evileye'" in content:
                    return parent
            except Exception:
                continue
    
    # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ pyproject.toml, –∏—â–µ–º –ø–æ –Ω–∞–ª–∏—á–∏—é –ø–∞–ø–∫–∏ evileye –∏ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞
    for parent in current_path.parents:
        evileye_dir = parent / "evileye"
        if evileye_dir.exists() and evileye_dir.is_dir():
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ø–∞–ø–∫–∞ —Å –∫–æ–¥–æ–º –ø—Ä–æ–µ–∫—Ç–∞
            init_file = evileye_dir / "__init__.py"
            if init_file.exists():
                return parent
    
    # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–∞–ø–∫—É, –≥–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —ç—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç
    return current_path.parent


def create_entry_point(name, wrapper_script):
    """Create or update an entry point script"""
    entry_points_dir = Path.home() / ".local" / "bin"
    entry_points_dir.mkdir(parents=True, exist_ok=True)
    
    entry_point_path = entry_points_dir / name
    
    # Get the project root directory using robust detection
    project_root = find_project_root()
    wrapper_path = project_root / "evileye" / wrapper_script
    
    entry_point_content = f'''#!/usr/bin/python
import sys
import os
import subprocess
from pathlib import Path

def find_project_root():
    """
    –ù–∞–π—Ç–∏ –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞ EvilEye.
    –ò—â–µ—Ç –ø–∞–ø–∫—É, —Å–æ–¥–µ—Ä–∂–∞—â—É—é pyproject.toml —Å –∏–º–µ–Ω–µ–º –ø—Ä–æ–µ–∫—Ç–∞ 'evileye'.
    """
    # –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ —Å —Ç–µ–∫—É—â–µ–π —Ä–∞–±–æ—á–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    current_path = Path.cwd()
    
    # –ü–æ–¥–Ω–∏–º–∞–µ–º—Å—è –ø–æ –∏–µ—Ä–∞—Ä—Ö–∏–∏ –ø–∞–ø–æ–∫, –∏—â–∞ pyproject.toml
    for parent in [current_path] + list(current_path.parents):
        pyproject_path = parent / "pyproject.toml"
        if pyproject_path.exists():
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–µ–∫—Ç EvilEye
                content = pyproject_path.read_text()
                if "name = \\"evileye\\"" in content or "name = 'evileye'" in content:
                    return parent
            except Exception:
                continue
    
    # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ pyproject.toml, –∏—â–µ–º –ø–æ –Ω–∞–ª–∏—á–∏—é –ø–∞–ø–∫–∏ evileye –∏ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞
    for parent in [current_path] + list(current_path.parents):
        evileye_dir = parent / "evileye"
        if evileye_dir.exists() and evileye_dir.is_dir():
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ø–∞–ø–∫–∞ —Å –∫–æ–¥–æ–º –ø—Ä–æ–µ–∫—Ç–∞
            init_file = evileye_dir / "__init__.py"
            if init_file.exists():
                return parent
    
    # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–∏, –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö
    possible_paths = [
        Path.home() / "EvilEye",
        Path.home() / "evileye", 
        Path("/opt/evileye"),
        Path("/usr/local/evileye")
    ]
    
    for path in possible_paths:
        if path.exists():
            evileye_dir = path / "evileye"
            if evileye_dir.exists() and (evileye_dir / "__init__.py").exists():
                return path
    
    # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—É—â—É—é —Ä–∞–±–æ—á—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    return current_path

# Get the project root directory using robust detection
project_root = find_project_root()

# Add project root to Python path
if project_root.exists():
    sys.path.insert(0, str(project_root))

# Try to import and run the wrapper directly
try:
    from evileye.{wrapper_script.replace('.py', '')} import main
    sys.exit(main())
except ImportError:
    # If import fails, try to execute wrapper script directly
    wrapper_path = project_root / "evileye" / "{wrapper_script}"
    
    if wrapper_path.exists():
        # Execute the wrapper script directly
        sys.argv[0] = str(wrapper_path)
        exec(wrapper_path.read_text(), {{
            '__name__': '__main__',
            '__file__': str(wrapper_path)
        }})
    else:
        print(f"Error: Could not find wrapper script at {{wrapper_path}}")
        sys.exit(1)
'''
    
    # Write the entry point
    entry_point_path.write_text(entry_point_content)
    entry_point_path.chmod(0o755)
    
    return entry_point_path


def fix_entry_points():
    """Fix all EvilEye entry points"""
    print("üîß Fixing EvilEye entry points...")
    
    entry_points = {
        "evileye": "cli_wrapper.py",
        "evileye-process": "process_wrapper.py", 
        "evileye-configure": "configure_wrapper.py",
        "evileye-launch": "launch_wrapper.py",
        "evileye-create": "create_wrapper.py"
    }
    
    success_count = 0
    
    for name, wrapper in entry_points.items():
        try:
            entry_point_path = create_entry_point(name, wrapper)
            print(f"‚úÖ Created: {entry_point_path}")
            success_count += 1
        except Exception as e:
            print(f"‚ùå Failed to create {name}: {e}")
    
    if success_count == len(entry_points):
        print("\nüéâ All entry points have been fixed!")
        print("\nYou can now use:")
        for name in entry_points.keys():
            print(f"  {name} --help")
    else:
        print(f"\n‚ö†Ô∏è  Fixed {success_count}/{len(entry_points)} entry points")
    
    return success_count == len(entry_points)


def main():
    """Main function"""
    try:
        return fix_entry_points()
    except Exception as e:
        print(f"‚ùå Error fixing entry points: {e}")
        return False


if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
