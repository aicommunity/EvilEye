#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å AsyncController.
"""

import asyncio
import sys
import json
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(str(Path(__file__).parent))

from controller.async_controller import AsyncController


async def test_new_config():
    """–¢–µ—Å—Ç –Ω–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å AsyncController")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞
    controller = AsyncController()
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    config_path = "samples/video_3cam_async.json"
    try:
        with open(config_path, 'r') as f:
            config_data = json.load(f)
        print(f"‚úÖ –ù–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ {config_path}")
    except FileNotFoundError:
        print(f"‚ùå –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ {config_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return 1
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞ —Å –Ω–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
        print("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AsyncController —Å –Ω–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π...")
        await controller.initialize(config_data)
        print("‚úÖ AsyncController –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        print("\nüìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤:")
        print(f"  - system config: {controller.config_manager.config_data.get('system', {})}")
        print(f"  - processors: {list(controller.config_manager.config_data.get('processors', {}).keys())}")
        print(f"  - pipelines: {list(controller.config_manager.config_data.get('pipelines', {}).keys())}")
        print(f"  - visualizer: {controller.config_manager.config_data.get('visualizer', {})}")
        print(f"  - controller: {controller.config_manager.config_data.get('controller', {})}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ pipeline
        if controller.pipeline:
            print(f"  - pipeline name: {controller.pipeline.config.name}")
            print(f"  - pipeline enabled: {controller.pipeline.config.enabled}")
            print(f"  - pipeline max_concurrent_tasks: {controller.pipeline.config.max_concurrent_tasks}")
        
        # –ó–∞–ø—É—Å–∫ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞
        print("\nüîÑ –ó–∞–ø—É—Å–∫ AsyncController...")
        await controller.start()
        print("‚úÖ AsyncController –∑–∞–ø—É—â–µ–Ω")
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫
        metrics = controller.get_metrics()
        print(f"  - –ú–µ—Ç—Ä–∏–∫–∏: {metrics}")
        
        # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞
        print("\nüîÑ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ AsyncController...")
        await controller.stop()
        print("‚úÖ AsyncController –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        
        print("\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        return 0
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ: {e}")
        import traceback
        traceback.print_exc()
        return 1


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("=" * 70)
    print("–¢–µ—Å—Ç –Ω–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å AsyncController")
    print("=" * 70)
    
    try:
        ret = asyncio.run(test_new_config())
        print(f"\nüéØ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —Å –∫–æ–¥–æ–º: {ret}")
        return ret
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return 1


if __name__ == "__main__":
    sys.exit(main())
