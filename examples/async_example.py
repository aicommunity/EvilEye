#!/usr/bin/env python3
"""
–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞ EvilEye.
–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã.
"""

import asyncio
import json
from datetime import datetime
from pathlib import Path

from controller.async_controller import AsyncController
from core.async_components.data_types import Frame
import numpy as np


async def create_sample_frame(frame_id: int, source_id: int = 1) -> Frame:
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–∞–¥—Ä–∞"""
    # –°–æ–∑–¥–∞–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    image_data = np.random.randint(0, 255, (480, 640, 3), dtype=np.uint8)
    
    return Frame(
        id=frame_id,
        source_id=source_id,
        timestamp=datetime.now(),
        data=image_data,
        metadata={'test': True}
    )


async def demo_basic_usage():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –±–∞–∑–æ–≤–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
    print("=== –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –±–∞–∑–æ–≤–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è ===")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞
    controller = AsyncController()
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        await controller.initialize()
        
        # –ó–∞–ø—É—Å–∫
        await controller.start()
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∫–∞–¥—Ä–æ–≤
        for i in range(5):
            frame = await create_sample_frame(i)
            result = await controller.process_frame(frame)
            
            if result:
                print(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω –∫–∞–¥—Ä {i}: –Ω–∞–π–¥–µ–Ω–æ {len(result.tracks)} —Ç—Ä–µ–∫–æ–≤")
            else:
                print(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω –∫–∞–¥—Ä {i}: —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—É—Å—Ç–æ–π")
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫
        metrics = controller.get_metrics()
        print(f"–ú–µ—Ç—Ä–∏–∫–∏ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞: {json.dumps(metrics['controller'], indent=2)}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã
        health = await controller.get_health_status()
        print(f"–°—Ç–∞—Ç—É—Å –∑–¥–æ—Ä–æ–≤—å—è: {health['overall_health']}")
        
    finally:
        # –û—Å—Ç–∞–Ω–æ–≤–∫–∞
        await controller.stop()


async def demo_batch_processing():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –±–∞—Ç—á–µ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
    print("\n=== –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –±–∞—Ç—á–µ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ ===")
    
    controller = AsyncController()
    
    try:
        await controller.initialize()
        await controller.start()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –±–∞—Ç—á–∞ –∫–∞–¥—Ä–æ–≤
        frames = []
        for i in range(10):
            frame = await create_sample_frame(i)
            frames.append(frame)
        
        # –ë–∞—Ç—á–µ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
        results = await controller.process_batch(frames)
        print(f"–ë–∞—Ç—á–µ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞: {len(frames)} –∫–∞–¥—Ä–æ–≤ -> {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        
        # –î–µ—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ pipeline
        if controller.pipeline:
            pipeline_metrics = controller.pipeline.get_detailed_metrics()
            print(f"–ú–µ—Ç—Ä–∏–∫–∏ pipeline: {json.dumps(pipeline_metrics, indent=2)}")
        
    finally:
        await controller.stop()


async def demo_event_handling():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π"""
    print("\n=== –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π ===")
    
    controller = AsyncController()
    
    # –°—á–µ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π
    event_count = {'frame_processed': 0, 'error': 0, 'metrics': 0}
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π
    async def event_counter(event):
        event_type = event.type
        if event_type in event_count:
            event_count[event_type] += 1
            print(f"–°–æ–±—ã—Ç–∏–µ {event_type}: {event.data}")
    
    try:
        await controller.initialize()
        
        # –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏—è
        controller.event_bus.subscribe('frame_processed', event_counter)
        controller.event_bus.subscribe('error', event_counter)
        controller.event_bus.subscribe('metrics', event_counter)
        
        await controller.start()
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–¥—Ä–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–æ–±—ã—Ç–∏–π
        for i in range(3):
            frame = await create_sample_frame(i)
            await controller.process_frame(frame)
            await asyncio.sleep(0.1)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞
        
        # –û–∂–∏–¥–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π
        await asyncio.sleep(1)
        
        print(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–±—ã—Ç–∏–π: {event_count}")
        
    finally:
        await controller.stop()


async def demo_configuration_management():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π"""
    print("\n=== –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π ===")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Å—Ç–æ–º–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    custom_config = {
        'system': {
            'fps': 60,
            'max_memory_usage_mb': 8192,
            'debug_mode': True,
            'log_level': 'DEBUG'
        },
        'processors': {
            'video_capture': {
                'type': 'VideoCapture',
                'enabled': True,
                'max_queue_size': 20,
                'timeout': 0.05,
                'params': {
                    'fps': 60,
                    'resolution': [1280, 720]
                }
            },
            'object_detector': {
                'type': 'ObjectDetectorYolo',
                'enabled': True,
                'max_queue_size': 15,
                'batch_size': 4,
                'params': {
                    'model': 'yolo11n.pt',
                    'confidence': 0.3,
                    'device': 'cuda'
                }
            }
        },
        'pipelines': {
            'surveillance': {
                'enabled': True,
                'max_concurrent_tasks': 8,
                'buffer_size': 200
            }
        }
    }
    
    controller = AsyncController()
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å –∫–∞—Å—Ç–æ–º–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
        await controller.initialize(custom_config)
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        config_summary = controller.get_config_summary()
        print(f"–°–≤–æ–¥–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {json.dumps(config_summary, indent=2)}")
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤ —Ñ–∞–π–ª
        config_path = "custom_config.json"
        await controller.save_config(config_path)
        print(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ {config_path}")
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ —Ñ–∞–π–ª–∞
        new_controller = AsyncController()
        await new_controller.load_config(config_path)
        print("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ —Ñ–∞–π–ª–∞")
        
        # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        Path(config_path).unlink(missing_ok=True)
        
    finally:
        await controller.stop()


async def demo_performance_monitoring():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    print("\n=== –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ ===")
    
    controller = AsyncController()
    
    try:
        await controller.initialize()
        await controller.start()
        
        # –ò–º–∏—Ç–∞—Ü–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏
        start_time = datetime.now()
        
        for i in range(20):
            frame = await create_sample_frame(i)
            await controller.process_frame(frame)
            
            # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π –≤—ã–≤–æ–¥ –º–µ—Ç—Ä–∏–∫
            if i % 5 == 0:
                metrics = controller.get_metrics()
                pipeline_metrics = metrics.get('pipeline', {})
                if pipeline_metrics:
                    avg_time = pipeline_metrics.get('avg_processing_time', 0)
                    total_processed = pipeline_metrics.get('total_frames_processed', 0)
                    print(f"–ö–∞–¥—Ä {i}: —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ = {avg_time:.3f}s, –≤—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ = {total_processed}")
        
        end_time = datetime.now()
        total_time = (end_time - start_time).total_seconds()
        
        print(f"–û–±—â–µ–µ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {total_time:.2f} —Å–µ–∫—É–Ω–¥")
        print(f"–°—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å: {20/total_time:.2f} –∫–∞–¥—Ä–æ–≤/—Å–µ–∫")
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        if controller.pipeline:
            recommendations = controller.pipeline.get_performance_recommendations()
            if recommendations:
                print("–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:")
                for rec in recommendations:
                    print(f"  - {rec}")
        
    finally:
        await controller.stop()


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    print("üöÄ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞ EvilEye")
    print("=" * 60)
    
    try:
        # –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–π
        await demo_basic_usage()
        await demo_batch_processing()
        await demo_event_handling()
        await demo_configuration_management()
        await demo_performance_monitoring()
        
        print("\n‚úÖ –í—Å–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
        raise


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    asyncio.run(main())
